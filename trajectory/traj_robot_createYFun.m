%% Addition to traj_robot
% The script creates function files for the regressor matrix of the rigid body 
% model in dependence of the finite fourier series parameters
%
% Philipp Tarbiat
% Chair of Automatic Control
% TUM School of Engineering and Design
% Technical University of Munich


% Clear Workspace and add necessary pathes
clear;
addpath(pathdef_local);


% Trajectory settings
NUM_FOURIER_TERMS = 5;                          % Number of fourier series terms
TIME_PERIOD = 10;                               % Time of period of fourier series


% Base frequency of fourier series
omega_fourier = (2 * pi) / TIME_PERIOD;

%% Build Regressor Matrix with Finite Fourier Series


% Load model data
mdl = load('model/mdl_flexible_joint_robot_EL.mat');


% Build regressor matrix for rigid body model 
Y = mdl.regMat.Ybase_red(1:3,:);
Y(:,[2 10 18]) = []; % Delete columns of dynamic parameters of the motor


% Symbolic variables
syms a [NUM_FOURIER_TERMS,3] 'real';
syms b [NUM_FOURIER_TERMS,3] 'real';
syms t 'real';


% Create symbolic Finite Fourier Series
thetaTraj = sym(zeros(3,1));
omegaTraj = sym(zeros(3,1));
domegaTraj = sym(zeros(3,1));

for iJoint = 1:3
    for iN = 1:NUM_FOURIER_TERMS
        thetaTraj(iJoint) = thetaTraj(iJoint) ...
            + ((a(iN,iJoint) / (omega_fourier * iN)) ...
            * sin(omega_fourier * iN * t)) ...
            - ((b(iN,iJoint) / (omega_fourier * iN)) ...
            * cos(omega_fourier * iN * t));
        
        omegaTraj(iJoint) = omegaTraj(iJoint) ...
            + (a(iN,iJoint) * cos(omega_fourier * iN * t)) ...
            + (b(iN,iJoint) * sin(omega_fourier * iN * t));

        domegaTraj(iJoint) = omegaTraj(iJoint) ...
            - (a(iN,iJoint) * omega_fourier * iN * sin(omega_fourier * iN * t)) ...
            + (b(iN,iJoint) * omega_fourier * iN * cos(omega_fourier * iN * t));
    end
end


% Build function of fourier series
MDL_NAME = 'fourierSeries_fun';
matlabFunction(thetaTraj,omegaTraj,domegaTraj, ...
    'File', ['identification_trajectories/functions/', MDL_NAME], ...
    'Vars', {[a(:)' b(:)'], t}, ...
    'Outputs', {'theta' 'omega' 'domega'}, ...
    'Optimize', false, ...true, ...
    'Comments', {
    [' Code generated by file ''', mfilename, '''.'], ...
    [' Model: fourier series'], ...
    ' Inputs: ab, t', '', ''
    });


% Substitute symbolic Finite Fourier Series into regression matrix
oldSubsVec = [ ...
    mdl.vars.theta(1:3); ...
    mdl.vars.omega(1:3); ...
    mdl.vars.domega ...
    ];
newSubsVec = [ ...
    thetaTraj; ...
    omegaTraj; ...
    domegaTraj; domegaTraj; ...
    ];

for iSubs = 1:length(oldSubsVec)
    Y = subs(Y, oldSubsVec(iSubs), newSubsVec(iSubs));
end


% Build function of regressor matrix
MDL_NAME = 'YFun_fourierSeries';
vars_sym = { ...
    mdl.params.kinematic(1), mdl.params.kinematic(2:4), ...
    mdl.params.kinematic(5:7), mdl.params.kinematic(8:10), mdl.params.kinematic(11:13), ...
    ...
    [a(:)' b(:)'], ...
    t ...
    };
matlabFunction(Y, ...
    'File', ['identification_trajectories/functions/', MDL_NAME], ...
    'Vars', vars_sym, ...
    'Outputs', {'Y'}, ...
    'Optimize', false, ...true, ...
    'Comments', {
    [' Code generated by file ''', mfilename, '''.'], ...
    [' Model: YFun'], ...
    ' Inputs: g, i_g, r_P1P2, r_P2P3, r_P3P4, ab, t', '', ''
    });