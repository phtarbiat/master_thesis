//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: inverseDynamics_rigid_fun.cpp
//
// MATLAB Coder version            : 5.4
// C/C++ source code generated on  : 19-Feb-2023 09:36:55
//

// Include Files
#include "inverseDynamics_rigid_fun.h"
#include <cmath>

// Function Definitions
//
// inverseDynamics_rigid_fun
//     tauMotor = inverseDynamics_rigid_fun(G,IN2,IN3,IN4,IN5,IN6,IN7,IN8,IN9)
//
// Arguments    : double g
//                const double in2[3]
//                const double in3[3]
//                const double in4[3]
//                const double in5[18]
//                const double in6[3]
//                const double in7[3]
//                const double in8[3]
//                const double in9[3]
//                double tauMotor[3]
// Return Type  : void
//
void inverseDynamics_rigid_fun(double g, const double in2[3],
                               const double in3[3], const double[3],
                               const double in5[18], const double in6[3],
                               const double in7[3], const double in8[3],
                               const double in9[3], double tauMotor[3])
{
  double b_tauMotor_tmp;
  double c_tauMotor_tmp;
  double d_tauMotor_tmp;
  double e_tauMotor_tmp;
  double f_tauMotor_tmp;
  double g_tauMotor_tmp;
  double h_tauMotor_tmp;
  double i_tauMotor_tmp;
  double j_tauMotor_tmp;
  double k_tauMotor_tmp;
  double l_tauMotor_tmp;
  double t10;
  double t11;
  double t14;
  double t16;
  double t17;
  double t19;
  double t2;
  double t20;
  double t21;
  double t27;
  double t28;
  double t3;
  double t30;
  double t31;
  double t34;
  double t35;
  double t36;
  double t4;
  double t46;
  double t47;
  double t5;
  double t55;
  double t56;
  double t58;
  double t59;
  double t6;
  double t66;
  double t68;
  double t7;
  double t74;
  double t77;
  double t78;
  double t8;
  double t81;
  double tauMotor_tmp;
  //     This function was generated by the Symbolic Math Toolbox version 9.1.
  //     11-Jan-2023 09:46:25
  //  Code generated by file 'LiveEditorEvaluationHelperE1455415238'.
  //  Model: inverseDynamics_rigid_fun
  //  Inputs: g, r_P1P2, r_P2P3, r_P3P4, baseParam, theta, omega, domega, tauF
  //
  t2 = std::cos(in6[1]);
  t3 = std::cos(in6[2]);
  t4 = std::sin(in6[1]);
  t5 = std::sin(in6[2]);
  t6 = in7[1] + in7[2];
  t7 = in6[1] + in6[2];
  t8 = in6[1] * 2.0;
  t10 = std::cos(t8);
  t11 = std::sin(t8);
  t14 = in3[0] * t3;
  t16 = in3[1] * t3;
  t17 = std::cos(t7);
  t19 = in3[0] * t5;
  t20 = in3[1] * t5;
  t21 = std::sin(t7);
  t8 = t7 + in6[1];
  t5 = in2[1] + -in3[2];
  t3 = t7 * 2.0;
  t27 = std::cos(t8);
  t28 = std::sin(t8);
  t30 = in7[1] * t17;
  t31 = in7[2] * t17;
  t34 = in7[1] * t21;
  t35 = in7[2] * t21;
  t36 = in2[0] * t21;
  t55 = std::cos(t3);
  t56 = std::sin(t3);
  t58 = t17 * -in2[0];
  t59 = t14 + t20;
  t74 = (in3[1] * t2 + in3[0] * t4) + -in2[0];
  t46 = in2[1] * t30;
  t47 = in2[1] * t31;
  t66 = in5[15] * t59;
  t8 = in7[0] * in5[11] * t55;
  t68 = t16 + -t19;
  t3 = in7[0] * in5[10] * t56 / 2.0;
  t77 = in5[13] * (t30 + t31);
  t78 = in5[12] * (t34 + t35);
  t5 = ((in5[12] * t17 + -(in5[13] * t21)) + in5[15] * t17 * t5) +
       -(in5[16] * t21 * t5);
  t7 = (in5[14] + t66) + in5[16] * t68;
  t81 = (((in5[4] * t2 + in2[1] * in5[7] * t2) + -(in5[5] * t4)) +
         -(in2[1] * in5[8] * t4)) +
        t5;
  tauMotor_tmp = in3[0] * in7[1];
  b_tauMotor_tmp = in3[0] * in7[2];
  c_tauMotor_tmp = in7[1] * in3[1];
  d_tauMotor_tmp = in3[1] * in7[2];
  e_tauMotor_tmp = in7[0] * in3[0];
  f_tauMotor_tmp = in7[0] * in3[1];
  g_tauMotor_tmp = in7[0] * in2[0];
  h_tauMotor_tmp = in7[1] * in2[1];
  i_tauMotor_tmp = e_tauMotor_tmp * t27;
  j_tauMotor_tmp = f_tauMotor_tmp * t28;
  k_tauMotor_tmp =
      (((in3[2] * t34 + in3[2] * t35) + in7[0] * t58) + -(in2[1] * t34)) +
      -(in2[1] * t35);
  e_tauMotor_tmp *= t28;
  f_tauMotor_tmp *= t27;
  l_tauMotor_tmp =
      ((in7[0] * in5[3] * t10 + in7[0] * in5[2] * t11 / 2.0) + t8) + t3;
  t8 += t3;
  tauMotor[0] =
      ((((in9[0] -
          in7[0] *
              (((((((-in5[15] *
                         (((((((in7[2] * t16 / 2.0 - in7[2] * t19 / 2.0) +
                               -in2[0] * t30) +
                              -in2[0] * t31) +
                             tauMotor_tmp * t28) +
                            c_tauMotor_tmp * t27) +
                           b_tauMotor_tmp * t28 / 2.0) +
                          d_tauMotor_tmp * t27 / 2.0) +
                     in5[16] * (((((((in7[2] * t14 / 2.0 + in7[2] * t20 / 2.0) +
                                     -in2[0] * t34) +
                                    -in2[0] * t35) -
                                   tauMotor_tmp * t27) -
                                  b_tauMotor_tmp * t27 / 2.0) +
                                 c_tauMotor_tmp * t28) +
                                d_tauMotor_tmp * t28 / 2.0)) +
                    in5[11] * (in7[1] * t55 + in7[2] * t55)) +
                   in5[10] * (in7[1] * t56 / 2.0 + in7[2] * t56 / 2.0)) +
                  in7[1] * in5[2] * t11 / 2.0) +
                 in7[1] * in5[3] * t10) +
                in7[1] * in5[7] * in2[0] * t2) +
               in7[1] * in5[8] * t4 * -in2[0])) +
         in8[1] * t81) +
        in8[2] * t5) +
       (-in7[2] * ((((t8 + t77) + t78) +
                    in5[16] * ((((((((t46 + t47) + in7[0] * t14 / 2.0) +
                                    in7[0] * t20 / 2.0) +
                                   -in3[2] * t30) +
                                  -in3[2] * t31) -
                                 i_tauMotor_tmp / 2.0) +
                                j_tauMotor_tmp / 2.0) +
                               in7[0] * t21 * -in2[0])) -
                   in5[15] * ((((k_tauMotor_tmp + in7[0] * t16 / 2.0) -
                                in7[0] * t19 / 2.0) +
                               e_tauMotor_tmp / 2.0) +
                              f_tauMotor_tmp / 2.0)) -
        in7[1] *
            ((((((((l_tauMotor_tmp + t77) + t78) +
                  in5[7] * (g_tauMotor_tmp * t2 + h_tauMotor_tmp * t4)) -
                 in5[8] * (g_tauMotor_tmp * t4 - h_tauMotor_tmp * t2)) -
                in5[16] * ((((((-t46 - t47) + in3[2] * t30) + in3[2] * t31) +
                             in7[0] * t36) +
                            i_tauMotor_tmp) -
                           j_tauMotor_tmp)) -
               in5[15] * ((k_tauMotor_tmp + e_tauMotor_tmp) + f_tauMotor_tmp)) +
              in7[1] * in5[5] * t2) +
             in7[1] * in5[4] * t4))) +
      in8[0] * ((((((((in5[0] + in5[2] * (t2 * t2)) + in5[10] * (t17 * t17)) -
                     in2[0] * in5[8] * t2 * 2.0) -
                    in2[0] * in5[7] * t4 * 2.0) -
                   in5[3] * t2 * t4 * 2.0) -
                  in5[11] * t17 * t21 * 2.0) +
                 in5[16] * t17 * t74 * 2.0) +
                in5[15] * t21 * t74 * 2.0);
  tauMotor_tmp = -(in5[16] * g * t17) + -(in5[15] * g * t21);
  b_tauMotor_tmp = in3[0] * t27;
  c_tauMotor_tmp = in3[1] * t28;
  d_tauMotor_tmp = in7[0] * in5[16];
  e_tauMotor_tmp = in3[0] * t28;
  f_tauMotor_tmp = in3[1] * t27;
  g_tauMotor_tmp = in7[0] * in5[15];
  tauMotor[1] =
      ((((((((tauMotor_tmp + in9[1]) + in8[0] * t81) + in8[2] * t7) +
           in7[0] *
               ((((l_tauMotor_tmp -
                   d_tauMotor_tmp * ((t36 + b_tauMotor_tmp) - c_tauMotor_tmp)) -
                  g_tauMotor_tmp * ((t58 + e_tauMotor_tmp) + f_tauMotor_tmp)) +
                 in7[0] * in5[7] * in2[0] * t2) +
                in7[0] * in5[8] * t4 * -in2[0])) -
          in7[1] * (in7[2] * in5[16] * t59 - in7[2] * in5[15] * t68)) -
         in7[2] * (in5[16] * t6 * t59 - in5[15] * t6 * t68)) +
        in8[1] * (((in5[6] + in5[14]) + t66 * 2.0) +
                  in5[16] * (t16 * 2.0 - t19 * 2.0))) -
       in5[8] * g * t2) -
      in5[7] * g * t4;
  tauMotor[2] =
      (((((tauMotor_tmp + in9[2]) + in8[2] * in5[14]) + in8[0] * t5) +
        in8[1] * t7) +
       in7[0] * ((t8 + d_tauMotor_tmp *
                           ((((t14 / 2.0 + t20 / 2.0) - b_tauMotor_tmp / 2.0) +
                             c_tauMotor_tmp / 2.0) +
                            t21 * -in2[0])) -
                 g_tauMotor_tmp *
                     ((((t16 / 2.0 - t19 / 2.0) + t58) + e_tauMotor_tmp / 2.0) +
                      f_tauMotor_tmp / 2.0))) +
      in7[1] * (in7[1] * in5[16] * t59 - in7[1] * in5[15] * t68);
}

//
// Arguments    : void
// Return Type  : void
//
void inverseDynamics_rigid_fun_initialize()
{
}

//
// Arguments    : void
// Return Type  : void
//
void inverseDynamics_rigid_fun_terminate()
{
}

//
// File trailer for inverseDynamics_rigid_fun.cpp
//
// [EOF]
//
