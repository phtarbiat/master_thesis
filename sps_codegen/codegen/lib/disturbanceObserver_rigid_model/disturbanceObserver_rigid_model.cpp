//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: disturbanceObserver_rigid_model.cpp
//
// MATLAB Coder version            : 5.4
// C/C++ source code generated on  : 19-Feb-2023 09:38:08
//

// Include Files
#include "disturbanceObserver_rigid_model.h"
#include "disturbanceObserver_rigid_model_types.h"
#include <cmath>

// Function Definitions
//
// Inverse dyanmics disturbance Observer for the rigid body model
//
//  Philipp Tarbiat
//  Chair of Automatic Control
//  TUM School of Engineering and Design
//  Technical University of Munich
//
// Arguments    : const struct0_T *paramStruct
//                double h
//                const double u_k[3]
//                const double theta_k[3]
//                const double omega_k[3]
//                const double omega_pk[3]
//                const double uDisObs_pk[3]
//                double uDisObs_k[3]
// Return Type  : void
//
void disturbanceObserver_rigid_model(
    const struct0_T *paramStruct, double h, const double u_k[3],
    const double theta_k[3], const double omega_k[3], const double omega_pk[3],
    const double uDisObs_pk[3], double uDisObs_k[3])
{
  double b_uDisObs_k_tmp;
  double c_uDisObs_k_tmp;
  double d_uDisObs_k_tmp;
  double domega_k_idx_0;
  double domega_k_idx_1;
  double domega_k_idx_2;
  double e_uDisObs_k_tmp;
  double f_uDisObs_k_tmp;
  double g_uDisObs_k_tmp;
  double h_uDisObs_k_tmp;
  double i_uDisObs_k_tmp;
  double j_uDisObs_k_tmp;
  double k_uDisObs_k_tmp;
  double l_uDisObs_k_tmp;
  double t10;
  double t11;
  double t14;
  double t16;
  double t17;
  double t19;
  double t2;
  double t20;
  double t21;
  double t27;
  double t28;
  double t3;
  double t30;
  double t31;
  double t34;
  double t35;
  double t36;
  double t4;
  double t46;
  double t47;
  double t5;
  double t55;
  double t56;
  double t58;
  double t59;
  double t6;
  double t66;
  double t68;
  double t7;
  double t74;
  double t77;
  double t78;
  double t8;
  double t81;
  double uDisObs_k_tmp;
  //  Load model parameters
  //  Robot model
  //  Disturbance Observer
  //  Calculate numeric derivative of motor velocity
  //  Equation of single step numerical derivative
  //
  //  Philipp Tarbiat
  //  Chair of Automatic Control
  //  TUM School of Engineering and Design
  //  Technical University of Munich
  domega_k_idx_0 = (omega_k[0] - omega_pk[0]) / h;
  domega_k_idx_1 = (omega_k[1] - omega_pk[1]) / h;
  domega_k_idx_2 = (omega_k[2] - omega_pk[2]) / h;
  //  Inverse dynamics motor
  // inverseDynamicsMotor_disObserver_rigid_fun
  //     tauMotor =
  //     inverseDynamicsMotor_disObserver_rigid_fun(G,IN2,IN3,IN4,IN5,IN6,IN7,IN8)
  //     This function was generated by the Symbolic Math Toolbox version 9.1.
  //     11-Jan-2023 09:46:36
  //  Code generated by file 'LiveEditorEvaluationHelperE1455415238'.
  //  Model: inverseDynamicsMotor_disObserver_rigid_fun
  //  Inputs: g, r_P1P2, r_P2P3, r_P3P4, baseParam, theta, omega, domega
  //
  t2 = std::cos(theta_k[1]);
  t3 = std::cos(theta_k[2]);
  t4 = std::sin(theta_k[1]);
  t5 = std::sin(theta_k[2]);
  t6 = omega_k[1] + omega_k[2];
  t7 = theta_k[1] + theta_k[2];
  t8 = theta_k[1] * 2.0;
  t10 = std::cos(t8);
  t11 = std::sin(t8);
  t14 = paramStruct->robot.r_P2P3[0] * t3;
  t16 = paramStruct->robot.r_P2P3[1] * t3;
  t17 = std::cos(t7);
  t19 = paramStruct->robot.r_P2P3[0] * t5;
  t20 = paramStruct->robot.r_P2P3[1] * t5;
  t21 = std::sin(t7);
  t8 = t7 + theta_k[1];
  t5 = paramStruct->robot.r_P1P2[1] + -paramStruct->robot.r_P2P3[2];
  t3 = t7 * 2.0;
  t27 = std::cos(t8);
  t28 = std::sin(t8);
  t30 = omega_k[1] * t17;
  t31 = omega_k[2] * t17;
  t34 = omega_k[1] * t21;
  t35 = omega_k[2] * t21;
  t36 = paramStruct->robot.r_P1P2[0] * t21;
  t55 = std::cos(t3);
  t56 = std::sin(t3);
  t58 = t17 * -paramStruct->robot.r_P1P2[0];
  t59 = t14 + t20;
  t74 =
      (paramStruct->robot.r_P2P3[1] * t2 + paramStruct->robot.r_P2P3[0] * t4) +
      -paramStruct->robot.r_P1P2[0];
  t46 = paramStruct->robot.r_P1P2[1] * t30;
  t47 = paramStruct->robot.r_P1P2[1] * t31;
  t66 = paramStruct->robot.baseParam[15] * t59;
  t8 = omega_k[0] * paramStruct->robot.baseParam[11] * t55;
  t68 = t16 + -t19;
  t3 = omega_k[0] * paramStruct->robot.baseParam[10] * t56 / 2.0;
  t77 = paramStruct->robot.baseParam[13] * (t30 + t31);
  t78 = paramStruct->robot.baseParam[12] * (t34 + t35);
  t5 = ((paramStruct->robot.baseParam[12] * t17 +
         -(paramStruct->robot.baseParam[13] * t21)) +
        paramStruct->robot.baseParam[15] * t17 * t5) +
       -(paramStruct->robot.baseParam[16] * t21 * t5);
  t7 = (paramStruct->robot.baseParam[14] + t66) +
       paramStruct->robot.baseParam[16] * t68;
  t81 =
      (((paramStruct->robot.baseParam[4] * t2 +
         paramStruct->robot.r_P1P2[1] * paramStruct->robot.baseParam[7] * t2) +
        -(paramStruct->robot.baseParam[5] * t4)) +
       -(paramStruct->robot.r_P1P2[1] * paramStruct->robot.baseParam[8] * t4)) +
      t5;
  //  Calculate observer output
  //  Filter observer output
  //  Equation of a frist order discrete low-pass filter
  //
  //  Philipp Tarbiat
  //  Chair of Automatic Control
  //  TUM School of Engineering and Design
  //  Technical University of Munich
  uDisObs_k_tmp = paramStruct->robot.r_P2P3[0] * omega_k[1];
  b_uDisObs_k_tmp = paramStruct->robot.r_P2P3[0] * omega_k[2];
  c_uDisObs_k_tmp = omega_k[1] * paramStruct->robot.r_P2P3[1];
  d_uDisObs_k_tmp = paramStruct->robot.r_P2P3[1] * omega_k[2];
  e_uDisObs_k_tmp = omega_k[0] * paramStruct->robot.r_P2P3[0];
  f_uDisObs_k_tmp = omega_k[0] * paramStruct->robot.r_P2P3[1];
  g_uDisObs_k_tmp = omega_k[0] * paramStruct->robot.r_P1P2[0];
  h_uDisObs_k_tmp = omega_k[1] * paramStruct->robot.r_P1P2[1];
  i_uDisObs_k_tmp = e_uDisObs_k_tmp * t27;
  j_uDisObs_k_tmp = f_uDisObs_k_tmp * t28;
  k_uDisObs_k_tmp = (((paramStruct->robot.r_P2P3[2] * t34 +
                       paramStruct->robot.r_P2P3[2] * t35) +
                      omega_k[0] * t58) +
                     -(paramStruct->robot.r_P1P2[1] * t34)) +
                    -(paramStruct->robot.r_P1P2[1] * t35);
  e_uDisObs_k_tmp *= t28;
  f_uDisObs_k_tmp *= t27;
  l_uDisObs_k_tmp =
      ((omega_k[0] * paramStruct->robot.baseParam[3] * t10 +
        omega_k[0] * paramStruct->robot.baseParam[2] * t11 / 2.0) +
       t8) +
      t3;
  t8 += t3;
  uDisObs_k[0] =
      (1.0 - paramStruct->controller.cFilter) * uDisObs_pk[0] +
      paramStruct->controller.cFilter *
          (((((-omega_k[0] *
                   (((((((-paramStruct->robot.baseParam[15] *
                              (((((((omega_k[2] * t16 / 2.0 -
                                     omega_k[2] * t19 / 2.0) +
                                    -paramStruct->robot.r_P1P2[0] * t30) +
                                   -paramStruct->robot.r_P1P2[0] * t31) +
                                  uDisObs_k_tmp * t28) +
                                 c_uDisObs_k_tmp * t27) +
                                b_uDisObs_k_tmp * t28 / 2.0) +
                               d_uDisObs_k_tmp * t27 / 2.0) +
                          paramStruct->robot.baseParam[16] *
                              (((((((omega_k[2] * t14 / 2.0 +
                                     omega_k[2] * t20 / 2.0) +
                                    -paramStruct->robot.r_P1P2[0] * t34) +
                                   -paramStruct->robot.r_P1P2[0] * t35) -
                                  uDisObs_k_tmp * t27) -
                                 b_uDisObs_k_tmp * t27 / 2.0) +
                                c_uDisObs_k_tmp * t28) +
                               d_uDisObs_k_tmp * t28 / 2.0)) +
                         paramStruct->robot.baseParam[11] *
                             (omega_k[1] * t55 + omega_k[2] * t55)) +
                        paramStruct->robot.baseParam[10] *
                            (omega_k[1] * t56 / 2.0 + omega_k[2] * t56 / 2.0)) +
                       omega_k[1] * paramStruct->robot.baseParam[2] * t11 /
                           2.0) +
                      omega_k[1] * paramStruct->robot.baseParam[3] * t10) +
                     omega_k[1] * paramStruct->robot.baseParam[7] *
                         paramStruct->robot.r_P1P2[0] * t2) +
                    omega_k[1] * paramStruct->robot.baseParam[8] * t4 *
                        -paramStruct->robot.r_P1P2[0]) +
               domega_k_idx_1 * t81) +
              domega_k_idx_2 * t5) +
             (-omega_k[2] *
                  ((((t8 + t77) + t78) +
                    paramStruct->robot.baseParam[16] *
                        ((((((((t46 + t47) + omega_k[0] * t14 / 2.0) +
                              omega_k[0] * t20 / 2.0) +
                             -paramStruct->robot.r_P2P3[2] * t30) +
                            -paramStruct->robot.r_P2P3[2] * t31) -
                           i_uDisObs_k_tmp / 2.0) +
                          j_uDisObs_k_tmp / 2.0) +
                         omega_k[0] * t21 * -paramStruct->robot.r_P1P2[0])) -
                   paramStruct->robot.baseParam[15] *
                       ((((k_uDisObs_k_tmp + omega_k[0] * t16 / 2.0) -
                          omega_k[0] * t19 / 2.0) +
                         e_uDisObs_k_tmp / 2.0) +
                        f_uDisObs_k_tmp / 2.0)) -
              omega_k[1] *
                  ((((((((l_uDisObs_k_tmp + t77) + t78) +
                        paramStruct->robot.baseParam[7] *
                            (g_uDisObs_k_tmp * t2 + h_uDisObs_k_tmp * t4)) -
                       paramStruct->robot.baseParam[8] *
                           (g_uDisObs_k_tmp * t4 - h_uDisObs_k_tmp * t2)) -
                      paramStruct->robot.baseParam[16] *
                          ((((((-t46 - t47) +
                               paramStruct->robot.r_P2P3[2] * t30) +
                              paramStruct->robot.r_P2P3[2] * t31) +
                             omega_k[0] * t36) +
                            i_uDisObs_k_tmp) -
                           j_uDisObs_k_tmp)) -
                     paramStruct->robot.baseParam[15] *
                         ((k_uDisObs_k_tmp + e_uDisObs_k_tmp) +
                          f_uDisObs_k_tmp)) +
                    omega_k[1] * paramStruct->robot.baseParam[5] * t2) +
                   omega_k[1] * paramStruct->robot.baseParam[4] * t4))) +
            domega_k_idx_0 *
                ((((((((paramStruct->robot.baseParam[0] +
                        paramStruct->robot.baseParam[2] * (t2 * t2)) +
                       paramStruct->robot.baseParam[10] * (t17 * t17)) -
                      paramStruct->robot.r_P1P2[0] *
                          paramStruct->robot.baseParam[8] * t2 * 2.0) -
                     paramStruct->robot.r_P1P2[0] *
                         paramStruct->robot.baseParam[7] * t4 * 2.0) -
                    paramStruct->robot.baseParam[3] * t2 * t4 * 2.0) -
                   paramStruct->robot.baseParam[11] * t17 * t21 * 2.0) +
                  paramStruct->robot.baseParam[16] * t17 * t74 * 2.0) +
                 paramStruct->robot.baseParam[15] * t21 * t74 * 2.0)) -
           u_k[0]);
  uDisObs_k_tmp =
      -(paramStruct->robot.baseParam[16] * paramStruct->robot.g * t17) +
      -(paramStruct->robot.baseParam[15] * paramStruct->robot.g * t21);
  b_uDisObs_k_tmp = paramStruct->robot.r_P2P3[0] * t27;
  c_uDisObs_k_tmp = paramStruct->robot.r_P2P3[1] * t28;
  d_uDisObs_k_tmp = omega_k[0] * paramStruct->robot.baseParam[16];
  e_uDisObs_k_tmp = paramStruct->robot.r_P2P3[0] * t28;
  f_uDisObs_k_tmp = paramStruct->robot.r_P2P3[1] * t27;
  g_uDisObs_k_tmp = omega_k[0] * paramStruct->robot.baseParam[15];
  uDisObs_k[1] =
      (1.0 - paramStruct->controller.cFilter) * uDisObs_pk[1] +
      paramStruct->controller.cFilter *
          (((((((((uDisObs_k_tmp + domega_k_idx_0 * t81) +
                  domega_k_idx_2 * t7) +
                 omega_k[0] * ((((l_uDisObs_k_tmp -
                                  d_uDisObs_k_tmp * ((t36 + b_uDisObs_k_tmp) -
                                                     c_uDisObs_k_tmp)) -
                                 g_uDisObs_k_tmp * ((t58 + e_uDisObs_k_tmp) +
                                                    f_uDisObs_k_tmp)) +
                                omega_k[0] * paramStruct->robot.baseParam[7] *
                                    paramStruct->robot.r_P1P2[0] * t2) +
                               omega_k[0] * paramStruct->robot.baseParam[8] *
                                   t4 * -paramStruct->robot.r_P1P2[0])) -
                omega_k[1] *
                    (omega_k[2] * paramStruct->robot.baseParam[16] * t59 -
                     omega_k[2] * paramStruct->robot.baseParam[15] * t68)) -
               omega_k[2] * (paramStruct->robot.baseParam[16] * t6 * t59 -
                             paramStruct->robot.baseParam[15] * t6 * t68)) +
              domega_k_idx_1 * (((paramStruct->robot.baseParam[6] +
                                  paramStruct->robot.baseParam[14]) +
                                 t66 * 2.0) +
                                paramStruct->robot.baseParam[16] *
                                    (t16 * 2.0 - t19 * 2.0))) -
             paramStruct->robot.baseParam[8] * paramStruct->robot.g * t2) -
            paramStruct->robot.baseParam[7] * paramStruct->robot.g * t4) -
           u_k[1]);
  uDisObs_k[2] =
      (1.0 - paramStruct->controller.cFilter) * uDisObs_pk[2] +
      paramStruct->controller.cFilter *
          ((((((uDisObs_k_tmp +
                domega_k_idx_2 * paramStruct->robot.baseParam[14]) +
               domega_k_idx_0 * t5) +
              domega_k_idx_1 * t7) +
             omega_k[0] * ((t8 + d_uDisObs_k_tmp *
                                     ((((t14 / 2.0 + t20 / 2.0) -
                                        b_uDisObs_k_tmp / 2.0) +
                                       c_uDisObs_k_tmp / 2.0) +
                                      t21 * -paramStruct->robot.r_P1P2[0])) -
                           g_uDisObs_k_tmp * ((((t16 / 2.0 - t19 / 2.0) + t58) +
                                               e_uDisObs_k_tmp / 2.0) +
                                              f_uDisObs_k_tmp / 2.0))) +
            omega_k[1] *
                (omega_k[1] * paramStruct->robot.baseParam[16] * t59 -
                 omega_k[1] * paramStruct->robot.baseParam[15] * t68)) -
           u_k[2]);
}

//
// Arguments    : void
// Return Type  : void
//
void disturbanceObserver_rigid_model_initialize()
{
}

//
// Arguments    : void
// Return Type  : void
//
void disturbanceObserver_rigid_model_terminate()
{
}

//
// File trailer for disturbanceObserver_rigid_model.cpp
//
// [EOF]
//
